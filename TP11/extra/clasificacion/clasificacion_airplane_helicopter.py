# -*- coding: utf-8 -*-
"""clasificacion_airplane_helicopter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11lZBF-OVOh6sXLM7KntHBT1BSPl-2DdV
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

#!unzip "/content/drive/My Drive/colab/dataset.zip"

train_datagen = ImageDataGenerator(rescale = 1./255,
shear_range = 0.2,
zoom_range = 0.2,
horizontal_flip = True)
test_datagen = ImageDataGenerator(rescale = 1./255)
training_set = train_datagen.flow_from_directory('/content/dataset/train',
target_size = (64, 64),
batch_size = 32,
class_mode = 'binary')
test_set = test_datagen.flow_from_directory('/content/dataset/test',
target_size = (64, 64),
batch_size = 32,
class_mode = 'binary')

import tensorflow as tf                                                         
                                                                                
mnist = tf.keras.datasets.mnist                                                 
                                                                                
#(x_train, y_train), (x_test, y_test) = mnist.load_data()                        
#x_train, x_test = x_train / 255.0, x_test / 255.0                               
                                                                                
#ts = x_train.shape                                                              
#x_train = x_train.reshape(ts[0], ts[1], ts[2], 1)                               
#tt = x_test.shape                                                               
#x_test = x_test.reshape(tt[0], tt[1], tt[2], 1)                                 
                                                                                
model = tf.keras.models.Sequential([            
  tf.keras.layers.experimental.preprocessing.Resizing(64, 64,
                                                      interpolation='bilinear'),                          
  tf.keras.layers.Conv2D(6, (6, 6), activation='relu',                          
                         input_shape=(64, 64, 3)),                              
  tf.keras.layers.Conv2D(12, (5, 5), strides=(2, 2), activation='relu'),        
  tf.keras.layers.Conv2D(24, (4, 4), strides=(2, 2), activation='relu'),        
  tf.keras.layers.Flatten(),                                                    
  tf.keras.layers.Dropout(rate=.25),                                            
  tf.keras.layers.Dense(200, activation='relu'),                                
  tf.keras.layers.Dense(2, activation='softmax')                               
])                                                                              
                                                                                
optimizer = tf.keras.optimizers.Adam(decay=.0001)                               
                                                                                
model.compile(optimizer=optimizer,                                              
              loss='sparse_categorical_crossentropy',                           
              metrics=['accuracy'])                                             
                                                                                
#model.fit(x_train, y_train, epochs=5)

#model.evaluate(x_test, y_test)

model.fit(training_set,
          epochs = 25)

model.evaluate(test_set)

import numpy as np
b = test_set.next()
print(b[1][0:5])
model.predict_proba(b[0][0:5])